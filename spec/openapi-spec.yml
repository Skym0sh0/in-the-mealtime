openapi: 3.0.3
info:
  title: In The Mealtime
  description: This is the API for In The Mealtime
  version: 1.0.0
tags:
  - name: Restaurant
    description: Everything about Restaurants
  - name: Order
    description: Everything about Orders
paths:
  /api/order:
    get:
      tags:
        - Order
      summary: Fetch all orders
      description: Fetch all orders
      operationId: fetchOrders
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{id}:
    get:
      tags:
        - Order
      summary: Fetch single order
      description: Fetch single order
      operationId: fetchOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    delete:
      tags:
        - Order
      summary: Deletes as single order
      description: Deletes as single order
      operationId: deleteOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      responses:
        '204':
          description: Successful operation
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/restaurant:
    get:
      tags:
        - Order
      summary: Fetch orderable restaurants
      description: Fetch orderable restaurants
      operationId: fetchOrderableRestaurants
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ID'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ID'
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/restaurant/{restaurantId}:
    post:
      tags:
        - Order
      summary: Create new order for a certain restaurant
      description: Create new order for a certain restaurant
      operationId: createOrder
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
          description: ID of the restaurant for that the order will be
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{orderId}/infos:
    put:
      tags:
        - Order
      summary: Sets Infos to an Order
      description: Sets Infos to an Order
      operationId: setOrderInfo
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInfosPatch"
          application/xml:
            schema:
              $ref: "#/components/schemas/OrderInfosPatch"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{orderId}/order-position:
    post:
      tags:
        - Order
      summary: Creates a new order position
      description: Creates a new order position
      operationId: createOrderPosition
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderPositionPatch"
          application/xml:
            schema:
              $ref: "#/components/schemas/OrderPositionPatch"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{orderId}/order-position/{orderPositionId}:
    patch:
      tags:
        - Order
      summary: Updates an order position
      description: Updates an order position
      operationId: updateOrderPosition
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: path
          name: orderPositionId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderPositionPatch"
          application/xml:
            schema:
              $ref: "#/components/schemas/OrderPositionPatch"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    delete:
      tags:
        - Order
      summary: Deletes an order position
      description: Deletes an order position
      operationId: deleteOrderPosition
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: path
          name: orderPositionId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{id}/lock:
    patch:
      tags:
        - Order
      summary: Locks Order to try ordering
      description: Locks Order to try ordering
      operationId: lockOrder
      parameters:
        - in: path
          required: true
          name: id
          schema:
            $ref: "#/components/schemas/ID"
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    delete:
      tags:
        - Order
      summary: Re-open Order after locking
      description: Re-open Order after locking
      operationId: reopenOrder
      parameters:
        - in: path
          required: true
          name: id
          schema:
            $ref: "#/components/schemas/ID"
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{id}/ordered:
    patch:
      tags:
        - Order
      summary: Set Order to be ordered and waiting for delivery
      description: Set Order to be ordered and waiting for delivery
      operationId: orderIsNowOrdered
      parameters:
        - in: path
          required: true
          name: id
          schema:
            $ref: "#/components/schemas/ID"
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{id}/delivered:
    patch:
      tags:
        - Order
      summary: Set Order to be delivered
      description: Set Order to be delivered
      operationId: orderIsNowDelivered
      parameters:
        - in: path
          required: true
          name: id
          schema:
            $ref: "#/components/schemas/ID"
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{id}/revoke:
    delete:
      tags:
        - Order
      summary: Revoke Order
      description: Revoke Order
      operationId: revokeOrder
      parameters:
        - in: path
          required: true
          name: id
          schema:
            $ref: "#/components/schemas/ID"
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/order/{id}/archive:
    delete:
      tags:
        - Order
      summary: Archive Order
      description: Archive Order
      operationId: archiveOrder
      parameters:
        - in: path
          required: true
          name: id
          schema:
            $ref: "#/components/schemas/ID"
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      responses:
        200:
          $ref: "#/components/responses/SuccessOrderResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /api/restaurant:
    get:
      tags:
        - Restaurant
      summary: Fetch all restaurants
      description: Fetch all restaurants
      operationId: fetchRestaurants
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    post:
      tags:
        - Restaurant
      summary: Create a new restaurant
      description: Create a new restaurant
      operationId: createRestaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantPatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/RestaurantPatch'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
            application/xml:
              schema:
                $ref: '#/components/schemas/Restaurant'
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/restaurant/{id}:
    get:
      tags:
        - Restaurant
      summary: Fetch restaurant
      description: Fetch restaurant
      operationId: fetchRestaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          $ref: "#/components/responses/SuccessRestaurantResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    put:
      tags:
        - Restaurant
      summary: Updates a restaurants
      description: Updates a new restaurants
      operationId: updateRestaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantPatch'
          application/xml:
            schema:
              $ref: '#/components/schemas/RestaurantPatch'
      responses:
        200:
          $ref: "#/components/responses/SuccessRestaurantResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        '412':
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    delete:
      tags:
        - Restaurant
      summary: Delete a restaurants
      description: Delete a new restaurants
      operationId: deleteRestaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: If-Match
          required: true
          schema:
            $ref: "#/components/schemas/Version"
      responses:
        204:
          description: Successful operation
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        412:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/restaurant/{id}/report:
    get:
      tags:
        - Restaurant
      summary: Fetch restaurant report
      description: Fetch restaurant report
      operationId: fetchRestaurantReport
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantReport"
            application/xml:
              schema:
                $ref: "#/components/schemas/RestaurantReport"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /api/restaurant/{restaurantId}/menu-page:
    put:
      tags:
        - Restaurant
      summary: Creates a new menu page of a specified restaurant
      description: Creates a new menu page of a specified restaurant
      operationId: addRestaurantsMenuPage
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/png, image/jpeg, image/jpg, image/gif, image/webp
                headers:
                  Content-Type:
                    schema:
                      type: string
                      enum: [ image/png, image/jpeg, image/jpg, image/gif, image/webp ]
      responses:
        200:
          $ref: "#/components/responses/SuccessRestaurantResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
  /api/restaurant/{restaurantId}/menu-page/{pageId}:
    get:
      tags:
        - Restaurant
      summary: Fetch menu page of a specified restaurant
      description: Fetch menu page of a specified restaurant
      operationId: fetchRestaurantsMenuPage
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: path
          name: pageId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: query
          name: thumbnail
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    delete:
      tags:
        - Restaurant
      summary: Delete a menu page of a specified restaurant
      description: Delete a menu page of a specified restaurant
      operationId: deleteRestaurantsMenuPage
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
        - in: path
          name: pageId
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        200:
          $ref: "#/components/responses/SuccessRestaurantResponse"
        400:
          $ref: "#/components/responses/ClientErrorResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

components:
  schemas:
    RestaurantPatch:
      type: object
      properties:
        name:
          type: string
        avatarColor:
          $ref: "#/components/schemas/Color"
        style:
          type: string
        kind:
          type: string
        phone:
          type: string
        website:
          type: string
        email:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        orderFee:
          $ref: "#/components/schemas/MoneyValue"
        address:
          $ref: '#/components/schemas/Address'
    Restaurant:
      type: object
      required:
        - id
        - name
        - address
        - menuPages
      allOf:
        - $ref: "#/components/schemas/RestaurantPatch"
        - $ref: "#/components/schemas/Updatable"
      properties:
        id:
          $ref: "#/components/schemas/ID"
        address:
          $ref: '#/components/schemas/Address'
        menuPages:
          type: array
          items:
            $ref: "#/components/schemas/MenuPage"
    Address:
      type: object
      properties:
        street:
          type: string
        housenumber:
          type: string
        postal:
          type: string
        city:
          type: string
    RestaurantReport:
      type: object
      required:
        - restaurantId
        - countOfOrders
        - countOfOrderedMeals
        - overallPrice
        - overallTip
        - topFetchers
        - topOrderers
        - topMoneyCollectors
        - topParticipants
        - topMeals
      properties:
        restaurantId:
          $ref: "#/components/schemas/ID"
        countOfOrders:
          type: integer
          format: int32
        countOfOrderedMeals:
          type: integer
          format: int32
        overallPrice:
          $ref: "#/components/schemas/MoneyValue"
        overallTip:
          $ref: "#/components/schemas/MoneyValue"
        topOrderers:
          type: array
          items:
            $ref: "#/components/schemas/StatisticPerson"
        topFetchers:
          type: array
          items:
            $ref: "#/components/schemas/StatisticPerson"
        topMoneyCollectors:
          type: array
          items:
            $ref: "#/components/schemas/StatisticPerson"
        topParticipants:
          type: array
          items:
            $ref: "#/components/schemas/StatisticPerson"
        topMeals:
          type: array
          items:
            $ref: "#/components/schemas/StatisticPerson"
    StatisticPerson:
      type: object
      properties:
        name:
          type: string
        count:
          type: integer
          format: int32
    MenuPage:
      type: object
      required:
        - id
        - name
        - index
      properties:
        id:
          type: string
          format: uuid
        index:
          type: integer
          format: int32
        name:
          type: string
    Order:
      type: object
      required:
        - id
        - restaurantId
        - infos
        - orderPositions
        - orderState
        - stateManagement
      allOf:
        - $ref: "#/components/schemas/Updatable"
      properties:
        id:
          $ref: "#/components/schemas/ID"
        restaurantId:
          $ref: "#/components/schemas/ID"
        infos:
          $ref: "#/components/schemas/OrderInfos"
        orderState:
          $ref: "#/components/schemas/OrderStateType"
        date:
          type: string
          format: date
        stateManagement:
          $ref: "#/components/schemas/OrderStateManagement"
        orderPositions:
          type: array
          items:
            $ref: "#/components/schemas/OrderPosition"
    OrderStateManagement:
      type: object
      properties:
        locked_at:
          type: string
          format: date-time
        ordered_at:
          type: string
          format: date-time
        delivered_at:
          type: string
          format: date-time
        revoked_at:
          type: string
          format: date-time
        archived_at:
          type: string
          format: date-time
        next_transition_duration:
          type: string
          format: duration
        next_transition_timestamp:
          type: string
          format: date-time
    OrderInfosPatch:
      type: object
      properties:
        orderer:
          type: string
        fetcher:
          type: string
        moneyCollectionType:
          $ref: "#/components/schemas/OrderMoneyCollectionType"
        moneyCollector:
          type: string
        orderClosingTime:
          type: string
          format: time
        orderFee:
          $ref: "#/components/schemas/MoneyValue"
        orderText:
          type: string
        maximumMealCount:
          type: integer
          format: int32
          minimum: 1
    OrderInfos:
      allOf:
        - $ref: "#/components/schemas/OrderInfosPatch"
    OrderPositionPatch:
      required:
        - name
        - meal
        - price
      properties:
        name:
          type: string
        meal:
          type: string
        price:
          $ref: "#/components/schemas/MoneyValue"
        paid:
          $ref: "#/components/schemas/MoneyValue"
        tip:
          $ref: "#/components/schemas/MoneyValue"

    OrderPosition:
      type: object
      allOf:
        - $ref: "#/components/schemas/OrderPositionPatch"
      required:
        - id
        - name
        - meal
        - price
        - index
      properties:
        id:
          $ref: "#/components/schemas/ID"
        index:
          type: integer
          format: int32

    OrderStateType:
      type: string
      enum:
        - New
        - Open
        - Locked
        - Revoked
        - Ordered
        - Delivered
        - Archived
    OrderMoneyCollectionType:
      type: string
      enum:
        - Bar
        - PayPal
    ID:
      type: string
      format: uuid
    MoneyValue:
      type: integer
      format: int64
      minimum: 0
      maximum: 100000000
    Color:
      type: string
    Version:
      type: string
      format: uuid
    ErrorObject:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        correlationId:
          type: string
        message:
          type: string
        detailMessage:
          type: string
        stacktrace:
          type: string
    Creatable:
      type: object
      required:
        - createdAt
        - createdBy
      properties:
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
    Updatable:
      type: object
      required:
        - version
      allOf:
        - $ref: "#/components/schemas/Creatable"
      properties:
        version:
          $ref: "#/components/schemas/Version"
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
          format: uuid

    ChangeEvent:
      type: object
      description: This is an event generated by the server and sent to the client to notify about changes. It is not used in the ReST API, but with websockets
      required:
        - eventType
        - subjects
      properties:
        eventType:
          type: string
          enum:
            - ORDERS_CHANGED
            - ORDER_UPDATED
            - RESTAURANTS_CHANGED
            - RESTAURANT_UPDATED
        subjects:
          type: array
          items:
            $ref: "#/components/schemas/ID"

  responses:
    SuccessOrderResponse:
      description: Successful operation
      headers:
        ETag:
          schema:
            $ref: "#/components/schemas/Version"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
        application/xml:
          schema:
            $ref: '#/components/schemas/Order'
    SuccessRestaurantResponse:
      description: Successful operation
      headers:
        ETag:
          schema:
            $ref: "#/components/schemas/Version"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Restaurant'
        application/xml:
          schema:
            $ref: '#/components/schemas/Restaurant'
    ClientErrorResponse:
      description: Operation failed due to client error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorObject"
        application/xml:
          schema:
            $ref: "#/components/schemas/ErrorObject"
    ServerErrorResponse:
      description: Operation failed due to client error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorObject"
        application/xml:
          schema:
            $ref: "#/components/schemas/ErrorObject"
